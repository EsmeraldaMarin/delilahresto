openapi: 3.0.0
servers:
  - url: 'http://localhost:3000'
    description: Servidor local
info:
  version: 1.0.0-oas3
  title: Delilah Resto
  description: Backend proyecto 3
tags:
  - name: user
    description: all users
  - name: order
    description: all orders
  - name: product
    description: all productos

paths:
  /login:
    post:
      tags:
        - user
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User logged in successfully
        '404':
          description: Non-existent user
  /users:
    get:
      tags:
        - user
      summary: Get all users
      description: 'An admin can get all users info, a client only can get its info'
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          description: User not found
    post:
      tags:
        - user
      summary: Create a new user
      description: Create a new user if the username or the email doesn't already exist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: New user created successfully
        '400':
          description: Bad request
        '409':
          description: Existent user
  /orders:
    get:
      tags:
        - order
      summary: Get all orders
      description: >-
        An admin can see all the orders, regular clients only can see their
        orders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '400':
          description: Bad request
    post:
      tags:
        - order
      summary: New order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      description: Create an order
      responses:
        '200':
          description: New order created successfully
        '400':
          description: Bad request
  '/orders/{id}':
    put:
      tags:
        - order
      summary: Update the order status
      description: Only an admin can update the order status
      parameters:
        - name: id
          in: path
          description: Order id to update the status
          required: true
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Orders/properties/id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                status:
                  description: Updated status of the order
                  type: string
              required:
                - status
      responses:
        '200':
          description: Order status updated successfully
        '400':
          description: Bad request
    delete:
      tags:
        - order
      summary: Delete an order
      description: Only an admin can delete an order
      parameters:
        - name: id
          in: path
          description: 'Order id to delete the order '
          required: true
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Orders/properties/id'
      responses:
        '200':
          description: Order deleted successfully
        '400':
          description: Bad request
  /products:
    get:
      tags:
        - product
      summary: Get all products
      description: All the users can see all products
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Bad request
    post:
      tags:
        - product
      summary: New product
      description: 'Create a new product, only an admin can upload a new product'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '201':
          description: New product created successfully
        '400':
          description: Bad request
  '/products/{id}':
    put:
      tags:
        - product
      summary: Update a product by id
      description: >-
        Only an admin can update the price, name, stock, image or category of
        the product.
      parameters:
        - name: id
          in: path
          description: 'Product id to update the product '
          required: true
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Products/properties/id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                price:
                  description: Updated price of the product
                  type: string
                name:
                  description: Updated name of the product
                  type: string
                stock:
                  description: Updated stock of the product
                  type: string
                image:
                  description: Updated image of the product
                  type: string
                category:
                  description: Updated category of the product
                  type: string
      responses:
        '200':
          description: Successful update operation
        '400':
          description: Bad request
    delete:
      tags:
        - product
      summary: Delete a product by id
      description: Only an admin can delete a product.
      parameters:
        - name: id
          in: path
          description: 'Order id to delete the product '
          required: true
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Products/properties/id'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      xml:
        name: Login
    Users:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        fullname:
          type: string
        email:
          type: string
        is_admin:
          type: boolean
        phone:
          type: string
        address:
          type: string
        password:
          type: string
      xml:
        name: Users
    Orders:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        status:
          type: string
        payment_method:
          type: string
        update_time:
          type: string
      xml:
        name: Orders
    Products:
      type: object
      properties:
        id:
          type: integer
        product_name:
          type: string
        stock:
          type: boolean
        img_url:
          type: string
        category:
          type: string
      xml:
        name: Products